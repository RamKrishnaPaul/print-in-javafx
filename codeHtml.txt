/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package htmleditor;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Base64;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.ToolBar;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.DragEvent;
import javafx.scene.input.Dragboard;
import javafx.scene.input.MouseDragEvent;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Priority;
import javafx.scene.web.HTMLEditor;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
//import org.controlsfx.control.PopOver;

/**
 * FXML Controller class
 *
 * @author Manoj
 */
public class EditorController implements Initializable {

    /**
     * Initializes the controller class.
     */
    @FXML
    private HTMLEditor htmlEditor;

    @Override
    public void initialize(URL url, ResourceBundle rb) {

        Node node = htmlEditor.lookup(".top-toolbar");
//    if (node instanceof ToolBar) {  
//      ToolBar bar = (ToolBar) node;  
//      Button smurfButton = new Button("table");
//      Button insertImage = new Button(" image");
//      bar.getItems().addAll(smurfButton,insertImage);  
//      smurfButton.setOnAction(new EventHandler<ActionEvent>() {  
//        @Override public void handle(ActionEvent arg0) {  
//          htmlEditor.setHtmlText(  
//              htmlEditor.getHtmlText() +  
//              "<table border='2'><tr><td>Manoj</td><td>syamsir</td></tr></table>"  
//          );  
//        }  
//      });  
//      
//        insertImage.setOnAction(new EventHandler<ActionEvent>() {  
//        @Override public void handle(ActionEvent arg0) { 
//                 FileChooser fileChooser = new FileChooser();
//                 fileChooser.setTitle("select image");
//                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("*.jpeg","*.JPEG","*.PNG","*.png","*.jpg","*.JPG");
//                fileChooser.getExtensionFilters().add(extFilter);
//                File file = fileChooser.showOpenDialog(new Stage());
//             try {
//                            byte[] bytes = loadFile(file);
//                            byte[] encoded = Base64.getEncoder().encode(bytes);
//                            String encodedString = new String(encoded);
//                            System.out.println("encodedString"+encodedString);
//                            htmlEditor.setHtmlText(
//                                    htmlEditor.getHtmlText() +  
//                                            "<img src='data:image/png;base64," + encodedString+ "'>" );
//                        } catch (IOException ex) {
//                            Logger.getLogger(EditorController.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//        
//        }  
//      });
//    
//    }  
//    
//    }
//    private static byte[] loadFile(File file) throws IOException {
//	    InputStream is = new FileInputStream(file);
//
//	    long length = file.length();
//	    if (length > Integer.MAX_VALUE) {
//	        // File is too large
//	    }
//	    byte[] bytes = new byte[(int)length];
//	    
//	    int offset = 0;
//	    int numRead = 0;
//	    while (offset < bytes.length
//	           && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
//	        offset += numRead;
//	    }
//
//	    if (offset < bytes.length) {
//	        throw new IOException("Could not completely read file "+file.getName());
//	    }
//
//	    is.close();
//	    return bytes;
//    }
//}
         if (node instanceof ToolBar) {  
      ToolBar bar = (ToolBar) node;  
      Button smurfButton = new Button("insert table");
//             Group g = new Group();
        
        TextField rowField=new TextField(" ");
        rowField.setPrefWidth(30);
        TextField columnField=new TextField(" ");
        columnField.setPrefWidth(30);
      Button insertImage = new Button("insert image");
      bar.getItems().addAll(smurfButton,rowField,columnField,insertImage);
      smurfButton.setOnAction(new EventHandler<ActionEvent>() {  
        @Override public void handle(ActionEvent arg0) {  
            StringBuilder tableContent=new StringBuilder();
            tableContent.append("<table border='2'>");
            for (int i = 0; i < Integer.parseInt(rowField.getText()); i++) {
                 tableContent.append("<tr >");
                for (int j = 0; j < Integer.parseInt(columnField.getText()); j++) {
                     tableContent.append("<td width='50px'>column").append(j+1).append("</td>");
                }
                tableContent.append("</tr >");
            }
            tableContent.append("</table ><br>");
          htmlEditor.setHtmlText( htmlEditor.getHtmlText() +tableContent);  
        }  
      });  
      
        insertImage.setOnAction(new EventHandler<ActionEvent>() {  
        @Override public void handle(ActionEvent arg0) { 
                 FileChooser fileChooser = new FileChooser();
                 fileChooser.setTitle("select image");
                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("All images",new String[]{"*.JPEG","*.PNG","*.png","*.jpg","*.JPG","*.gif"});
                fileChooser.getExtensionFilters().add(extFilter);
                File file = fileChooser.showOpenDialog(new Stage());
             try {
                            byte[] bytes = loadFile(file);
                            byte[] encoded = Base64.getEncoder().encode(bytes);
                            String encodedString = new String(encoded);
                            System.out.println("encodedString"+encodedString);
                            htmlEditor.setHtmlText(
                                    htmlEditor.getHtmlText() +  
                                            "<img src='data:image/png;base64," + encodedString+ "'>" );
                        } catch (IOException ex) {
                            Logger.getLogger(EditorController.class.getName()).log(Level.SEVERE, null, ex);
                        }
        
        }  
      });
    
    }
	}
     private static byte[] loadFile(File file) throws IOException {
	    InputStream is = new FileInputStream(file);

	    long length = file.length();
	    if (length > Integer.MAX_VALUE) {
	        // File is too large
	    }
	    byte[] bytes = new byte[(int)length];
	    
	    int offset = 0;
	    int numRead = 0;
	    while (offset < bytes.length
	           && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
	        offset += numRead;
	    }

	    if (offset < bytes.length) {
	        throw new IOException("Could not completely read file "+file.getName());
	    }

	    is.close();
	    return bytes;
    
     }
}
//        if (node instanceof ToolBar) {
//            ToolBar bar = (ToolBar) node;
//            Button smurfButton = new Button("insert table");
//            GridPane gridpane = new GridPane();
//            gridpane.setPadding(new Insets(5));
//            gridpane.setHgap(5);
//            gridpane.setVgap(5);
//            ColumnConstraints column1 = new ColumnConstraints(100);
//            ColumnConstraints column2 = new ColumnConstraints(50, 150, 300);
//            column2.setHgrow(Priority.ALWAYS);
//            gridpane.getColumnConstraints().addAll(column1, column2);
//
//            Label rowLbl = new Label("Enter no of row");
//            TextField rowField = new TextField();
//            Label columnLbl = new Label("Enter no of column");
//            TextField columnField = new TextField();
//
//            Button okBtn = new Button("OK");
//
//            // First name label
//            GridPane.setHalignment(rowLbl, HPos.RIGHT);
//            gridpane.add(rowLbl, 0, 0);
//
//            // Last name label
//            GridPane.setHalignment(columnLbl, HPos.RIGHT);
//            gridpane.add(columnLbl, 0, 1);
//
//            // First name field
//            GridPane.setHalignment(rowField, HPos.LEFT);
//            gridpane.add(rowLbl, 1, 0);
//
//            // Last name field
//            GridPane.setHalignment(columnField, HPos.LEFT);
//            gridpane.add(columnLbl, 1, 1);
//
//            // Save button
//            GridPane.setHalignment(okBtn, HPos.RIGHT);
//            gridpane.add(okBtn, 1, 2);
//
//            Button insertImage = new Button("insert image");
//            bar.getItems().addAll(smurfButton, insertImage);
//
//            okBtn.setOnAction(new EventHandler<ActionEvent>() {
//                @Override
//                public void handle(ActionEvent arg0) {
//                    StringBuilder tableContent = new StringBuilder();
//                    tableContent.append("<table border='2'>");
//                    for (int i = 0; i < Integer.parseInt(rowField.getText()); i++) {
//                        tableContent.append("<tr >");
//                        for (int j = 0; j < Integer.parseInt(columnField.getText()); j++) {
//                            tableContent.append("<td width='50px' >column").append(j + 1).append("</td>");
//                        }
//                        tableContent.append("</tr >");
//                    }
//                    tableContent.append("</table ><br>");
//                    htmlEditor.setHtmlText(htmlEditor.getHtmlText() + tableContent);
//                }
//            });
//            smurfButton.setOnAction(new EventHandler<ActionEvent>() {
//                @Override
//                public void handle(ActionEvent arg0) {
//                    Stage popup = new Stage();
//                    Scene scene = new Scene(smurfButton);
//                    popup.show();
//                }
//            });
//
//            insertImage.setOnAction(new EventHandler<ActionEvent>() {
//                @Override
//                public void handle(ActionEvent arg0) {
//                    FileChooser fileChooser = new FileChooser();
//                    fileChooser.setTitle("select image");
//                    FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("All images", new String[]{"*.JPEG", "*.PNG", "*.png", "*.jpg", "*.JPG", "*.gif"});
//                    fileChooser.getExtensionFilters().add(extFilter);
//                    File file = fileChooser.showOpenDialog(new Stage());
//                    try {
//                        byte[] bytes = loadFile(file);
//                        byte[] encoded = Base64.getEncoder().encode(bytes);
//                        String encodedString = new String(encoded);
//                        System.out.println("encodedString" + encodedString);
//                        htmlEditor.setHtmlText(
//                                htmlEditor.getHtmlText()
//                                + "<img src='data:image/png;base64," + encodedString + "'>");
//                    } catch (IOException ex) {
//                        Logger.getLogger(EditorController.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//
//                }
//            });
//
//        }
//    }
//
//    private static byte[] loadFile(File file) throws IOException {
//        InputStream is = new FileInputStream(file);
//
//        long length = file.length();
//        if (length > Integer.MAX_VALUE) {
//            // File is too large
//        }
//        byte[] bytes = new byte[(int) length];
//
//        int offset = 0;
//        int numRead = 0;
//        while (offset < bytes.length
//                && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
//            offset += numRead;
//        }
//
//        if (offset < bytes.length) {
//            throw new IOException("Could not completely read file " + file.getName());
//        }
//
//        is.close();
//        return bytes;
//
//    }
//}
